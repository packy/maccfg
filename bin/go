#!/usr/bin/env perl

use Config::General;
use Data::Dumper::Concise;
use Getopt::Long;
use Readonly;
use Term::ReadKey;
use List::MoreUtils qw( any );

Readonly my $sshpass => '/usr/local/bin/sshpass';
Readonly my $ssh     => '/usr/bin/ssh -oStrictHostKeyChecking=no -oServerAliveInterval=60';
Readonly my $scp     => '/usr/bin/scp -oStrictHostKeyChecking=no';

my %hostmap;
my $gorc         = $ENV{HOME}.'/.gorc';
my $hostmap_file = $ENV{HOME}.'/.go_hostmap.txt';
my @ADAPTERS     = qw/utun0 en5 en4 en0 en1/;
my $push_cmds    = 1;
my $def_user     = 'root';
my $method       = 'password';
my $verbose      = 0;
my $fake         = 0;
my $force_os;
my $def_passwd;
my %config;

GetOptions
    "rc=s"       => \$gorc,
    "adapter=s"  => \@ADAPTERS,
    "hostmap=s"  => \$hostmap_file,
    "commands!"  => \$push_cmds,
    "username=s" => \$def_user,
    "publickey"  => sub { $method = 'publickey' },
    "password"   => sub { $method = 'password' },
    "hostbased"  => sub { $method = 'hostbased' },
    "os=s"       => \$force_os,
    "verbose+"   => \$verbose,
    "fake!"      => \$fake,
    "prompt"    => sub {
        $method = 'password';
        print "Password: ";
        ReadMode('noecho'); # don't echo
        chomp($def_passwd = <STDIN>);
        ReadMode(0);        # back to normal
    },
    ;

if (-f $gorc) {
    my $conf = Config::General->new($gorc);
    %config  = $conf->getall;
    set_from_rc_data(\%config);
}

my $ip = get_ip();

read_hostmap();

while (@ARGV) {

    my $target = next_target();

    my $os = ($force_os) ? $force_os : get_os($target);
    print "OS: $os\n" if ($verbose);

    my $commands = ($push_cmds) ? os_commands($os, $ip) : q{};
    my $sshcmd   = ssh_command($target);
    my $script   = new_terminal_applescript($sshcmd, $commands);

    my $tmp      = make_temp($script);

    if ($commands) {
        copy_files_to_node($target, $os);
    }
    connect_to_target($target, $script, $tmp);
}

sub next_target {
    my $target = shift @ARGV;

    if (exists $config{aliases} && exists $config{aliases}->{$target}) {
        $target = $config{aliases}->{$target};
    }

    unless (is_up($target)) {
        print "$target is down!\n" if $target;
        exit;
    }

    if (exists $config{hosts}) {
        if (exists $config{hosts}->{$target}) {
            set_from_rc_data($config{hosts}->{$target});
        }
    }

    return $target;
}

sub new_terminal_applescript {
    my ($sshcmd, $commands) = @_;
    if ($ENV{ITERM_SESSION_ID} =~ /:/) {
        # iTerm3 v3!
return qq{
tell application "iTerm2"
  set newWindow to (create window with default profile command "$sshcmd")
  tell current session of newWindow
    $commands
  end tell
end tell
};
    }
    else {
return qq{tell application "iTerm"
  set oldterm to current terminal
  set newterm to (make new terminal)
  tell newterm
    set newsession to (make new session at the end of sessions)
    tell newsession
      exec command "$sshcmd"
      $commands
    end tell
  end tell
end tell
};
    }
}

sub make_temp {
    my($script) = @_;

    my $tmp = "/tmp/$$.osa";
    open my $out, '>', $tmp;
    print {$out} $script;
    close $out;

    return $tmp;
}

sub connect_to_target {
    my($target, $script, $tmp) = @_;

    print "Connecting to $target ";
    print qq{using command "$ssh" } if ($verbose);
    print "...\n";
    print $script if ($verbose > 1);
    print `osascript $tmp` unless ($fake);
    unlink $tmp;
}

sub copy_files_to_node {
    my ($target, $os) = @_;
    my (@files, $dest);

    $dest = '/tmp/packybin';
    if ($os eq 'rhel') {
        @files = ( '~/Sites/bash/linux_bash.sh',
                   '~/Sites/bash/aix_less.bin' );
    }
    elsif ($os eq 'aix') {
        @files = ( '~/Sites/bash/aix_dash.sh',
                   '~/Sites/bash/aix_less.bin' );
    }

    if (@files) {
        print "Making temporary directory on $target ";
        my $cmd = ssh_command($target);
        if ($verbose) {
            my $files = join q{ }, @files;
            print qq{using $cmd "mkdir -p $dest"};
        }
        print "...\n";
        print `$cmd "mkdir -p $dest"`;

        my $cp = scp_command($target, $dest, @files);
        print "Copying files to $target ";
        if ($verbose) {
            my $files = join q{ }, @files;
            print qq{using $scp $files $def_user\@$target:$dest};
        }
        print "...\n";
        print `$cp`;
    }
}

sub ssh_command {
    my $target = shift @_;
    my $cmd;
    if ($method eq 'password') {
        $cmd = qq{$sshpass -p $def_passwd $ssh $def_user\@$target};
    }
    else {
        $cmd = qq{$ssh $def_user\@$target};
    }
    if (@_) {
        $cmd .= q{ } . join q{ }, @_;
    }
    return $cmd;
}

sub scp_command {
    my $target = shift @_;
    my $dest  = shift;
    my $files = join q{ }, @_;
    if ($method eq 'password') {
        return qq{$sshpass -p $def_passwd $scp $files $def_user\@$target:$dest};
    }
    else {
        return qq{$scp $files $def_user\@$target:$dest};
    }
}

sub os_commands {
    my ($os, $ip) = @_;
    my $tmp = '/tmp/$$.sh';
    if ($os eq 'rhel') {
        return qq{
write text "export PACKBOOK_IP=$ip"
write text "source /tmp/packybin/linux_bash.sh"
        };
    }
    elsif ($os eq 'solaris') {
        return qq{
write text "exec bash"
write text "export PACKBOOK_IP=$ip"
write contents of file "/Users/packy/Sites/bash/solaris_bash_helpers.sh"
        };
    }
    elsif ($os eq 'aix') {
        return qq{
write text "exec /usr/local/bin/dash"
write contents of file "/Users/packy/Sites/bash/aix_dash_helpers.sh"
        };
    }
}

sub is_up {
    my $target = \$_[0];
    my $output = `ping -c 1 -t 5 $$target`;
    ($$target) = $output =~ /^PING\s+(\S+)\s+/;
    my ($up)   = $output =~ /1 packets transmitted, 1 packets received/;
    return $up;
}

sub read_hostmap {
    if (-e $hostmap_file) {
        my $data;
        open my $file, '<', $hostmap_file;
        while (my $line = <$file>) {
            $data .= $line;
        }
        close $file;
        %hostmap = %{ eval $data };
    }
}

sub write_hostmap {
    open my $file, '>', $hostmap_file;
    print {$file} Dumper(\%hostmap);
    close $file;
}

sub get_os {
    my ($target) = @_;
    $target = lc $target;

    return 'rhel'    if $target =~ /^rh\d+/;
    return 'solaris' if $target =~ /^sl\d+/;
    return 'aix'     if $target =~ /^ax\d+/;

    if (exists $hostmap{$target}) {
        if (exists $hostmap{$target}->{os}) {
            return $hostmap{$target}->{os};
        }
    }
    else {
        print "Running nmap -O $target to determine OS...\n";
        my $os   = 'unknown';
        my $data = `sudo nmap -O $target`;
        if ($data =~ /Running: Linux/) {
            $os = 'rhel';
        }
        $hostmap{$target} = { os => $os, nmap => $data };
        write_hostmap();
    }
}

sub get_ip {
    foreach my $adapter (@ADAPTERS) {
        my $data = `ifconfig $adapter 2>/dev/null`;
        if (my($ip) = $data =~ /inet\s+(\d+\.\d+\.\d+\.\d+)/) {
            return $ip;
        }
    }
}

sub set_from_rc_data {
    my $config = shift;
    print '$config = '.Dumper($config) if $verbose;
    if (exists $config->{default_password}) {
        $def_passwd = $config->{default_password};
    }

    if (exists $config->{default_username}) {
        $def_user = $config->{default_username};
    }

    if (exists $config->{commands}) {
        ($push_cmds) = ($config->{commands} !~ /^(no|0)$/i);
    }

    if (exists $config->{method}) {
        foreach ($config->{method}) {
            /publickey/ && do { $method = 'publickey'; last };
            /password/  && do { $method = 'password';  last };
            /hostbased/ && do { $method = 'hostbased'; last };
        }
    }

}

sub get_search_domains {
    my $ps = `ps -ef`;
    my $service;
    if ($ps =~ /Cisco AnyConnect Secure Mobility Client/) {
    }
    my $file = "/tmp/scutil.$$.txt";
    my $cmds = qq{open\nget State:/Network/Service/com.cisco.anyconnect/DNS\nd.show\nquit\n};
    open my $fh, '>', $file;
    print {$fh} $cmds;
    close $fh;

    print "scutil < -\n$cmds\n" if ($verbose);
    open $pipe, "scutil <$file |";
    my $mode;
    my @list;
    while (my $line = <$pipe>) {
        print $line if ($verbose);
        if ($line =~ /SearchDomains/) {
            $mode = 'domainlist';
            next;
        }
        next unless $mode;
        last if $line =~ /\}/;
        my($domain) = $line =~ /\d+\s+:\s+(\S+)\s*$/;
        push @list, $domain;
    }
    close $pipe;
    unlink $file;

    return @list;
}

sub add_search_domains {
    my $file = "/tmp/scutil.$$.txt";
    open my $fh, '>', $file;
    print {$fh} qq{open\nd.init\nget State:/Network/Service/com.cisco.anyconnect/DNS\n};
    foreach my $domain (@_) {
        print {$fh} "d.add DomainName $domain\n"
    }
    print {$fh} qq{set State:/Network/Service/com.cisco.anyconnect/DNS\nquit\n};
    close $fh;

    print "Adding search domains!\n";
    if ($verbose) {
        print "sudo scutil < -\n" . `cat $file`;
    }
    `sudo scutil <$file`;
    unlink $file;
}
__END__
