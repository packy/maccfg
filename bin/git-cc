#!/usr/bin/env perl
# submit changes to code collaborator

use strict;
use warnings;
use v5.10;

use Getopt::Long qw(:config pass_through);
use JSON;
use List::MoreUtils qw( uniq );
use Pod::Usage;
use Readonly;
use Symbol;

(my $branch = `git symbolic-ref HEAD`) =~ s{refs/heads/}{};
chomp $branch;

Readonly my $CCOLLAB => '/Applications/ccollab_client/ccollab';

my $review  = 'new';
my $fake    = 0;
my $man     = 0;
my $help    = 0;
my $verbose = 0;
my $commit  = 0;
my @changes;

GetOptions ( 'review=s'  => \$review,
             'change=i'  => \@changes,
             'verbose+'  => \$verbose,
             'commit+'   => \$commit,
             'cchelp' => sub {
                 my $args = join q{ }, @ARGV;
                 exec "$CCOLLAB help addchangelist $args";
             },
             'fake'   => \$fake,
             'help|?' => \$help,
             'man'    => \$man)
    or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitval => 0, -verbose => 2) if $man;

unless ($review =~ /^(?:\d+|new|ask|last)$/) {
    die "--review must be an integer review-id, 'new', 'ask', or 'last'\n";
}

if ($commit) {
    # ok, the code review is done!  Commit the code to Perforce!

    if ($review  =~ /^(?:\d+)$/) {
        commit_review($review);
    }
    elsif ($branch) {
        my $data = `git config branch.$branch.reviews`;
        my $reviews = decode_json($data);
        foreach my $review (keys %$reviews) {
            commit_review($review);
        }
    }

    run_filtered({ command => "git p4 rebase" });
    exit;
}

#
# first, prepare submits for Perforce
#

unless (@changes) {
    # if we weren't passed changes, let's do a p4 submit to make some
    @changes = p4_submit();
}

unless (@changes) {
    exit 1;
}

my $url;
my @reviews;
my %attachment;
make_reviews({ changes => \@changes,
               reviews => \@reviews,
               attach  => \%attachment,
               url     => \$url });

foreach my $r (@reviews) {
    system "open ${url}ui#review:id=$r";
}

my $reviews_json = encode_json(\%attachment);
system "git config --add branch.$branch.reviews '$reviews_json'";

###############################################################################

sub p4_submit {
    # don't call up an editor
    system "git config --add git-p4.skipSubmitEdit true";

    my $command = 'git-p4-dirty submit --prepare-p4-only';

    if ($fake) {
        $command .= ' --dry-run';
    }

    my $filter_state = 1;
    my @templates;
    my $filter = sub {
        my $line = shift;
        if (my ($t) =
            $line =~ /You can delete the file "([^"]+)" when finished./) {
            push @templates, $t;
        }
        if ($line =~ / Perforce\s+checkout | Synchronizing\s+p4\s+checkout /x) {
            $filter_state = 1;
        }
        elsif ($line =~ / Applying\s+\b[a-f0-9]+\b | opened\s+for\s+edit /x) {
            $filter_state = 0;
            print "$line\n";
            return 1;
        }
        print "$line\n" if $filter_state;
        return 1;
    };

    run_filtered({ command => $command, filter => $filter });

    unless (@templates) {
        die "No templates were created by $command\n";
    }

    my @changes;
    $filter = sub {
        my $line = shift;
        if (my ($c) = $line =~ /Change (\d+) created/i) {
            push @changes, $c;
        }
        print "$line\n";
        return 1;
    };

    foreach my $t (@templates) {
        # first, remove the diff from the end of the change spec
        my $t2 = $t . 'tmp';
        open my $in,  '<', $t;
        open my $out, '>', $t2;
        while (my $line = <$in>) {
            last if $line =~ /everything below this line is just the diff/;
            print {$out} $line;
        }
        close $out;
        close $in;

        $command = 'p4 change -i <' . $t2;

        my $count = scalar @changes;

        run_filtered({ command => $command, filter => $filter });

        if (@changes > $count) {
            unlink $t;
            unlink $t2;
        }
        else {
            print STDERR "No Perforce changes were created by $command\n";
        }
    }

    return @changes;
}

###############################################################################

sub make_reviews {
    my $args = shift;
    my $changes = $args->{changes};
    my $reviews = $args->{reviews};
    my $attach  = $args->{attach};
    my $url     = $args->{url};

    my $filter_state = 1;

    my $filter = sub {
        my $line = shift;
        if (my ($u) = $line =~ /Connecting to Collaborator Server (\S+)/i) {
            $$url = $u;
        }
        if (my ($r) = $line =~ /Review \#(\d+):/i) {
            push @$reviews, $r;
        }
        if (my($c, $r) =
            $line =~ /\@(\d+) successfully attached to Review \#(\d+):/) {
            push @{$attach->{$r}}, $c;
        }
        if ($line =~ /^ERROR: Executing command/) {
            # end of the line! time to get off!
            return 0;
        }
        print "$line\n";
        return 1;
    };

    my $command = "$CCOLLAB addchangelist " . join q{ }, $review, @$changes;

    run_filtered({ command => $command, filter => $filter });

    @$reviews = uniq @$reviews;

    return;
}

###############################################################################

sub run_filtered {
    my $args = shift;
    my $command = $args->{command};
    my $filter  = $args->{filter} || sub { my $line = shift; print "$line\n"; };

    $command .= ' 2>&1'; # redirect stderr to stdout

    print "VERBOSE: RUNNING $command |\n" if $verbose;
    open my $fh, "$command |";
    while (my $line = <$fh>) {
        print "VERBOSE: $line" if $verbose;
        chomp $line;
        last unless $filter->($line); # if filter returns false, stop reading
    }
    close $fh;

}

sub commit_review {
    my $review = shift;
    my $command = join q{ }, $CCOLLAB, 'commit', $review, '--non-interactive';
    run_filtered({ command => $command });
}

__END__

=head1 NAME

git cc - submit changes to code collaborator

=head1 SYNOPSIS

git cc [options] 

 Options:
   --commit          Commit the completed review for this branch.
   --review          Integer review-id, 'new', 'ask', or 'last'
   --verbose         Display the commands run and the output from those commands
   --cchelp          Display the help for "ccolab addchangelist"
   --fake            Print the ccolab command, don't run it.
   --man             full documentation
   -?                brief help message

=head1 OPTIONS

=over 8

=item B<--commit>

If the review for this branch was prepared with git-cc, the review ID is stored in the branch's configuration, and git-cc --commit will retrieve that information and submit the review to Perforce.  This can be used with any Code Collaborator review if the review ID is specified with --review.

=item B<--review>

Must be either an integer review-id, 'new', 'ask', or 'last' (defaults
to new).

=item B<--cchelp>

Display the output of the command "ccollab help addchangelist".  Any parameters after this option are passed to ccollab help.

=item B<--fake>

Print the ccolab command, don't run it.

=item B<--man>

Prints the manual page and exits.

=item B<-?>

Print a brief help message and exits.

=back

=head1 DESCRIPTION

B<git cc> will take the difference between the current branch and the
master branch and submit it to Code Collaborator.

=cut
