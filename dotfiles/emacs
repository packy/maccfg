
;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(inhibit-startup-screen t)
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(setq initial-scratch-message
  (format ";; scratch buffer created %s\n\n"
  (format-time-string "%Y-%m-%d at %T"))
)

(setq column-number-mode t)
(setq line-number-mode t)
(global-font-lock-mode t)

(defun command-line-find-file-read-only (switch)
   (find-file-read-only (pop command-line-args-left)))

(add-to-list 'command-switch-alist
             '("--read-only" . command-line-find-file-read-only))

; tab stops
(setq tab-width 4)

; use spaces instead of tabs
(defun set-tabs-equals-spaces-hook ()
     (setq tab-width 4 indent-tabs-mode nil))
(setq-default indent-tabs-mode nil)

;(autoload 'perl-mode "cperl-mode" "alternate mode for editing Perl programs" t)
(defalias 'perl-mode 'cperl-mode)
(load-library "cperl-mode")

(setq cperl-indent-level 4
      cperl-close-paren-offset -4
      cperl-continued-statement-offset 4
      cperl-indent-subs-specially nil
      cperl-indent-parens-as-block t
      cperl-tab-always-indent t)

(add-hook 'cperl-mode-hook
	  '(lambda nil
	     (local-set-key "\ep" 'indent-all)
	     (set-tabs-equals-spaces-hook)
	     )
	  )

 ;; (defun cperl-backward-to-start-of-continued-exp (lim)
 ;;  (if (memq (preceding-char) (append ")]}\"'`" nil))
 ;;      (forward-sexp -1))
 ;;  (beginning-of-line)
 ;;  (if (or (<= (point) lim) (< 0 cperl-continued-statement-offset))
 ;;      (goto-char (1+ lim)))
 ;;  (skip-chars-forward " \t"))

(load "~/.emacs.d/modes/php-mode")
(autoload 'php-mode "php-mode" "Major mode for editing php code." t)
(add-to-list 'auto-mode-alist '("\\.php$" . php-mode))
(add-to-list 'auto-mode-alist '("\\.inc$" . shell-script-mode))

(autoload 'applescript-mode "applescript-mode"
   "Major mode for editing AppleScript source." t)
 (add-to-list 'auto-mode-alist '("\\.applescript$" . applescript-mode))

;; Change title bar to ~/file-directory if the current buffer is a
;; real file or buffer name if it is just a buffer.
(setq frame-title-format
      '("emacs %S: " (buffer-file-name "%f" (dired-directory dired-directory "%b"))))

; map M-g to goto-line
(global-set-key (kbd "M-g") 'goto-line)

;; enable visual feedback on selections
(setq transient-mark-mode t)

(defun smart-split ()
  "Split the frame into 80-column sub-windows, and make sure no window has
   fewer than 80 columns."
  (interactive)
  (defun smart-split-helper (w)
    "Helper function to split a given window into two, the first of which has 
     80 columns."
    (if (> (window-width w) (* 2 81))
    (let ((w2 (split-window w 87 t)))
      (smart-split-helper w2))))
  (smart-split-helper nil))

;-------------------------------------------------------------------------------
(defun big-split ()
  "Split the frame into two 80-column, 60-row sub-windows"
  (interactive)
  ;(set-frame-position (selected-frame) 594 640)
  (set-frame-size (selected-frame) 168 60)
  (split-window-horizontally)
)
;-------------------------------------------------------------------------------
(defun huge-split ()
  "Split the frame into three 80-column, 60-row sub-windows"
  (interactive)
  ;(set-frame-position (selected-frame) 594 640)
  (set-frame-size (selected-frame) 255 60)
  (smart-split)
)
;-------------------------------------------------------------------------------
(defun mega-split ()
  "Split the frame into four 80-column, 60-row sub-windows"
  (interactive)
  ;(set-frame-position (selected-frame) 594 640)
  (set-frame-size (selected-frame) 342 60)
  (smart-split)
)
;-------------------------------------------------------------------------------
(defun home-split ()
  "Split the frame into six 80-column, 100-row sub-windows"
  (interactive)
  ;(set-frame-position (selected-frame) 594 640)
  (set-frame-size (selected-frame) 516 100)
  (smart-split)
)
;-------------------------------------------------------------------------------

; start the server
(server-start)

(defun read-only-file (file)
  "Open a file in a buffer and make the buffer read-only"
  (interactive)
  (find-file file)
  (toggle-read-only))

(defun unix-file ()
  "Change the current buffer to Latin 1 with Unix line-ends."
  (interactive)
  (set-buffer-file-coding-system 'iso-latin-1-unix t))
(defun dos-file ()
  "Change the current buffer to Latin 1 with DOS line-ends."
  (interactive)
  (set-buffer-file-coding-system 'iso-latin-1-dos t))
(defun mac-file ()
  "Change the current buffer to Latin 1 with Mac line-ends."
  (interactive)
  (set-buffer-file-coding-system 'iso-latin-1-mac t))

;-------------------------------------------------------------------------------

(defalias 'no-trailing-whitespace 'delete-trailing-whitespace)

;-------------------------------------------------------------------------------

 (global-set-key
  (kbd "<f5>")
  (lambda (&optional force-reverting)
    "Interactive call to revert-buffer. Ignoring the auto-save
 file and not requesting for confirmation. When the current buffer
 is modified, the command refuses to revert it, unless you specify
 the optional argument: force-reverting to true."
    (interactive "P")
    ;;(message "force-reverting value is %s" force-reverting)
    (if (or force-reverting (not (buffer-modified-p)))
        (revert-buffer :ignore-auto :noconfirm)
      (error "The buffer has been modified"))))

;-------------------------------------------------------------------------------
(defun center-window (x y)
  "Center the window on the screen."
  (interactive)
  (setq edges (window-pixel-edges))
  (setq height (- (/ y 2) (/ (- (nth 3 edges) (nth 1 edges)) 2)))
  (setq width  (- (/ x 2) (/ (- (nth 2 edges) (nth 0 edges)) 2)))
  (setq mylist `((top . height)  (left . width)))
  (setcdr (assq 'top  mylist) height)
  (setcdr (assq 'left mylist) width)
  (setq initial-frame-alist mylist)
)

(eval (car (read-from-string
            (shell-command-to-string (substitute-in-file-name "$HOME/bin/get_emacs_center_elisp")))))

;-------------------------------------------------------------------------------

(add-to-list 'load-path (substitute-in-file-name "$HOME/.emacs.d/modes"))

(load "~/.emacs.d/modes/highlight-indentation")

;-------------------------------------------------------------------------------

(add-to-list 'auto-mode-alist '("\\.sql$" . sql-mode))
(add-hook 'sql-mode-hook 'sqlup-mode)

(add-to-list 'auto-mode-alist
             '("\\.psql$" . (lambda ()
                              (sql-mode)
                              (sql-highlight-postgres-keywords))))

;;
;; Fix SQL indentation
;;

(defun get-previous-indentation ()
  "Get the column of the previous indented line"
  (interactive)
  (save-excursion
    (progn
      (move-beginning-of-line nil)
      (skip-chars-backward "\n \t")
      (back-to-indentation))
    (current-column)))

(defun get-current-indentation ()
  "Return column at current indentation"
  (interactive)
  (save-excursion
    (progn
      (back-to-indentation)
      (current-column))))

(defun point-at-current-indentation ()
  "Return point at current indentation"  
  (interactive)
  (save-excursion
    (progn
      (move-to-column (get-current-indentation))
      (point))))

(defun point-at-column-on-line (col)
  "Returns the point at `col` on the current line"
  (interactive)
  (save-excursion
    (progn
      (move-to-column col)
      (point))))

(defun ig-move-line-to-column (col)
  "Move the line to col; fill with all spaces if moveing forward"
  (interactive "p")
  (let ((point-at-cur-indent (point-at-current-indentation))
        (col-at-cur-indent (get-current-indentation)))
    (cond (
           (= col 0)
           ;; delete to beginning of line or do nothing
           (if (= col-at-cur-indent 0)
               nil
             (delete-region point-at-cur-indent (point-at-column-on-line 0))))
          (
           (< col col-at-cur-indent)
           ;; delete from our current point BACK to col
           (delete-region (point-at-column-on-line col) point-at-cur-indent))
          (
           (> col col-at-cur-indent)
           ;; delete all text from indent to beginning of line
           (progn
             (delete-region point-at-cur-indent (point-at-column-on-line 0))
             (move-beginning-of-line nil)
             ;; add spaces forward
             (insert (make-string col ?\s)))))))

(defun ig-indent-sql ()
  "Indent by `tab-width` at most 1 time greater than the previously indented line otherwise go to the beginning of the line indent forward by `tab-width`"
  (let ((previous (get-previous-indentation))
        (current (get-current-indentation)))
    (cond ( ;; exactly at previous line's indentation
           (= previous current)
           (ig-move-line-to-column (+ current tab-width)))

          ( ;; current is greater than previous
           (> current previous)
           ;; exactly at one indentation forward from previous lines indent
           (if (= tab-width (- current previous))
               ;; move line to beginning
               (ig-move-line-to-column 0)
             ;; go back to previous indentation level
             (ig-move-line-to-column previous)))

          (t 
           (ig-move-line-to-column (+ current tab-width))))))

(add-hook 'sql-mode-hook
          (function (lambda ()
                      (make-local-variable 'indent-line-function)
                      (setq indent-line-function 'ig-indent-sql))))

;-------------------------------------------------------------------------------

(setq-default fill-column 80)
(setq fci-rule-width 1)
(setq fci-rule-color "darkblue")
(require 'fill-column-indicator)
(require 'window-numbering)

;; Local Variables:
;; mode: emacs-lisp
;; End:
