#!/usr/bin/env perl
# atom:set useSoftTabs tabLength=4 grammar=perl:
use strict;
use warnings;
use v5.010;

use Config::General;
use Data::Dumper::Concise;
use Getopt::Long;
use List::MoreUtils qw( any );
use List::Util qw( max min );
use Pod::Usage;
use Proc::ProcessTable;
use Readonly;
use Scalar::Readonly ':all';
use Term::ReadKey;

Readonly my $iTerm2  => '^/.+\.app/Contents/MacOS/iTerm2';
Readonly my $bash    => '/usr/local/bin/bash';
Readonly my $sshpass => '/usr/local/bin/sshpass';
Readonly my $ssh     => '/usr/bin/ssh -oStrictHostKeyChecking=no '
                     . '-oServerAliveInterval=60';
Readonly my $scp     => '/usr/bin/scp -oStrictHostKeyChecking=no';
Readonly my $dest    => '/tmp/packybin';

my %hostmap;
my $gorc         = $ENV{HOME}.'/.gorc';
my $gitdir       = $ENV{GITDIR};
my $godir        = $gitdir.'/maccfg/go';
my $push_cmds    = 1;
my $def_user     = 'root';
my $method       = 'password';
my $check_if_up  = 1;
my $verbose      = 0;
my $fake         = 0;
my $color;
my $force_os;
my $def_passwd;
my %config;

process_command_line();

while (@ARGV) {
    my $target = next_target();
    open_new_terminal( $target );
}

sub next_target {
    my $target = shift @ARGV;

    if (exists $config{aliases} && exists $config{aliases}->{$target}) {
        print "ALIAS: $target => ".$config{aliases}->{$target}."\n" if $verbose;
        $target = $config{aliases}->{$target};
    }

    if (exists $config{hosts}) {
        if (exists $config{hosts}->{$target}) {
            $target = set_from_rc_data($target, $config{hosts}->{$target});
        }
    }

    print "CHECK_IF_UP: $check_if_up\n" if $verbose;
    if ( $check_if_up && is_up($target) ) {
        print STDERR "$target is down!\n" if $target;
        exit;
    }

    return $target;
}

sub open_new_terminal {
    my $target   = shift;
    print "TARGET: $target\n" if $verbose;
    my $commands = shell_commands( $target );
    my $script   = new_terminal_applescript( $commands );
    my $tempfile = make_temp_osa( $target, $script );

    print `osascript $tempfile` unless ($fake);
}

sub shell_commands {
    my ($target) = @_;

    my @after_ssh;
    my @commands;

    if (0) { # future reimplementation of push commands
    }

    push @after_ssh, q{|| any};

    my $sshcmd = ssh_command($target, @after_ssh);

    push @commands, (
        echo(qq{Connecting to $def_user\@$target via SSH}),
        echo($sshcmd),  $sshcmd
    );

    return make_temp_sh( $target, @commands );
}

sub ssh_command {
    my $target = shift @_;
    my $cmd;
    if ($method eq 'password' && defined $def_passwd) {
        $cmd = qq{$sshpass -p $def_passwd $ssh $def_user\@$target};
    }
    else {
        $cmd = qq{$ssh $def_user\@$target};
    }
    if (@_) {
        $cmd .= q{ } . join q{ }, @_;
    }
    return $cmd;
}


sub make_temp_osa {
    my $target = shift;
    my $script = join "\n", @_;

    my $tmp = tempfile($target, 'applescript');
    print "-"x50, "\n", $script, "\n" ,"-"x50,"\n" if $verbose;
    open my $out, '>', $tmp;
    print {$out} $script;
    close $out;

    return $tmp;
}

sub make_temp_sh {
    my $target = shift;
    my $script = join "\n", @_;

    my $tmp = tempfile($target, 'sh');
    open my $out, '>', $tmp;
    print {$out}  de_indent(qq[
        #!$bash
        any () {
          echo; read -n 1 -s -p "Press any key to exit"
        }

        $script
    ]);

    print {$out} "\n\nrm -f ", tempfile($target, '*'), "\n";
    close $out;
    chmod 0775, $tmp;

    return $tmp;
}

sub tempfile {
    my ($target, $ext) = @_;
    return sprintf '/tmp/go_%d_%s.%s', $$, $target, $ext;
}

sub echo {
    my $str = shift // q{};
    return q{} unless $verbose;
    return qq{echo $str};
}

sub is_up {
    my $target = shift;
    my $output = `ping -c 1 -t 5 $target`;
    my ($up)   = $output =~ /1 packets transmitted, 1 packets received/;
    return $up if $up;

    if ($output =~ /^PING\s+(\S+)\s+/) {
        $target = $1;
    }
    return;
}

#
# AppleScript generating subroutines
#

sub new_terminal_applescript {
    my ($cmd) = @_;

    my $color_script = q{};

    if ($color) {
        my($r,$g,$b) = $color =~ /(..)(..)(..)/;
        $color_script = set_term_bgcolor(hex($r),hex($g),hex($b));
    }

    return de_indent(qq{
      tell application "iTerm2"
        set newWindow to (create window with default profile command "$cmd")
        $color_script
      end tell
    });
}

sub set_term_bgcolor {
    my ($R, $G, $B) = @_;
    $R *= 65535/255;
    $G *= 65535/255;
    $B *= 65535/255;
    return de_indent(qq[
      tell current session of newWindow to set background color to {$R,$G,$B}
    ]);

#      tell current session of current window
#        set background color to {$R,$G,$B}
#      end tell
}

#
# command line processing
#

sub set_option_readonly {
    my ($key, $value) = @_;
    if ($key eq 'username') {
        $def_user = $value;  readonly_on($def_user);
        print "Setting user to '$value' via command line\n" if $verbose;
    }
    elsif ($key eq 'publickey' || $key eq 'password' || $key eq 'hostbased') {
        $method = $key;  readonly_on($method);
        print "Setting authentication method to '$method' via command line\n"
            if $verbose;
    }
    elsif ($key eq 'prompt') {
        $method = 'password';
        print "Password: ";
        ReadMode('noecho'); # don't echo
        chomp($def_passwd = <STDIN>);
        ReadMode(0);        # back to normal
        readonly_on($def_passwd);
        print "Setting passwd via command line\n" if $verbose;
    }
}

sub set_from_rc_data {
    my $target = shift;
    my $config = shift;
    print '$config_from_rc_data = '.Dumper($config) if $verbose;
    if (exists $config->{default_password}) {
        $def_passwd = $config->{default_password}
            unless readonly($def_passwd);
    }

    if (exists $config->{default_username}) {
        $def_user = $config->{default_username}
            unless readonly($def_user);
    }

    if (exists $config->{commands}) {
        ($push_cmds) = ($config->{commands} !~ /^(no|0)$/i);
    }

    if (exists $config->{method} && ! readonly($method)) {
        foreach ($config->{method}) {
            /publickey/ && do { $method = 'publickey'; last };
            /password/  && do { $method = 'password';  last };
            /hostbased/ && do { $method = 'hostbased'; last };
        }
    }

    if (exists $config->{check_is_up}) {
        if ( ! $config->{check_if_up} ||
               $config->{check_if_up} =~ /^f(?:alse)?/ ) {
            $check_if_up = 0;
        }
    }

    if (exists $config->{color}) {
        my $col = $config->{color};
        if (ref $col eq 'ARRAY') {
            $color = $col->[int(rand(scalar @$col))];
        }
        else {
            $color = $col;
        }
    }

    if (exists $config->{address}) {
        my $cmd = $config->{address};
        $target = eval $cmd;
        chomp $target;
        die "$cmd did not yield an IP address:\n    $target\n"
            unless $target =~ m{^\d+\.\d+\.\d+\.\d+$};
    }

    print 'results => '.Dumper({
        def_password  => $def_passwd,
        def_user      => $def_user,
        push_commands => $push_cmds,
        method        => $method,
        check_if_up   => $check_if_up,
        color         => $color,
    }) if $verbose;

    return $target;
}

sub process_command_line {
    my $help;
    my $man;

    GetOptions
#        "commands!"  => \$push_cmds,
#        "os=s"       => \$force_os,
#        "noos"       => sub { $force_os = 'none' },
        "rc=s"       => \$gorc,
        "color=s"    => \$color,
        "verbose+"   => \$verbose,
        "fake!"      => \$fake,
        "check!"     => \$check_if_up,
        "username=s" => \&set_option_readonly,
        "publickey"  => \&set_option_readonly,
        "password"   => \&set_option_readonly,
        "hostbased"  => \&set_option_readonly,
        "prompt"     => \&set_option_readonly,
        "help|?"     => \$help,
      or pod2usage(2);

    pod2usage(1) if $help;
    pod2usage(-exitval => 0, -verbose => 2) if $man;

    if (-f $gorc) {
        my $conf = Config::General->new($gorc);
        %config  = $conf->getall;
        set_from_rc_data(\%config);
    }
}

#
# utility functions
#

sub min_length {
    my $length = ~0; # maximum unsigned integer
    foreach my $str ( @_ ) {
        next unless defined $str;
        $length = min($length, length $str);
    }
    return $length != ~0 ? $length : 0;
}

sub de_indent {
    my $text = shift;

    $text =~ s/\A\s*\n//s;  # remove leading blank line
    $text =~ s/\s+\z//s;    # remove trailing whitespace

    my @lines = split /\n/, $text;

    # determine the minimum indentation
    my $indent = min_length( map { /^(\s+)/; $1 } grep { ! /^\s*$/ } @lines );

    # trim off the minimum indentation
    my $sindent = '\s' x $indent;

    $text =~ s/^$sindent//msxg;

    return $text;
}

##############################################################################

__END__

=head1 NAME

go - a quick and dirty utility to open connections to remote hosts in new iTerm2 windows

=head1 SYNOPSIS

go [options] host [host [host ...]]

Options:

  --check      Check to see if the host answers to ping before
               attempting to connect.  Negatable with --nocheck.

  --color      Set the background color of the terminal in #RRGGBB format.

  --rc         Loads the specified rc file instead of the default,
               $HOME/.gorc

  --username   Connects to the host with the username specified.

  --publickey  Connects using publickey authentication.
               This is the default.

  --hostbased  Connects using hostbased authentication.

  --password   Connects using password authentication.

  --prompt     Prompts for the password for the user on the remote host.

  --verbose    Prints out debugging information showing what it is doing.

  --fake       Walks through the steps for connecting to a remote host,
               but does not actually connect.

=cut

##############################################################################

sub shell_commands_future {
    my ($target) = @_;

    my @commands;

    my $sshcmd = qq{$ssh || any};

    if (0) { # future reimplementation of push commands
        my $source = "bash --rcfile /tmp/packybin/bashrc";

        my @files = grep { ! /~$/ } glob "$godir/common/*";

        if ($os eq 'rhel') {
            push @files, grep { ! /~$/ } glob "$godir/linux/*";
        }
        elsif ($os eq 'solaris') {
            push @files, grep { ! /~$/ } glob "$godir/solaris/*";
        }
        elsif ($os eq 'aix') {
            push @files, grep { ! /~$/ } glob "$godir/aix/*";
            # we have DASH on AIX
            $source = "dash --rcfile /tmp/packybin/dashrc -l";
        }

        my $mkdir = qq{$ssh "mkdir -p $dest"};
        my $scp   = scp_command($target, $dest, @files);

        push @commands, (
            echo(qq{Making temporary directory on $target}),
            echo($mkdir),  $mkdir,
            echo(qq{Copying temporary scripts}),
            echo($scp),    $scp,
        );

        $sshcmd = qq{$ssh -t "$source" || any};
    }

    push @commands, (
        echo(qq{Connecting to $target via SSH}),
        echo($sshcmd),  $sshcmd
    );

    return make_temp_sh( $target, @commands );
}

sub scp_command {
    my $target = shift @_;
    my $dest  = shift;
    my $files = join q{ }, @_;
    if ($method eq 'password') {
        return qq{$sshpass -p $def_passwd $scp $files $def_user\@$target:$dest};
    }
    else {
        return qq{$scp $files $def_user\@$target:$dest};
    }
}

sub existing_sessions {
    my @sessions;
    my $ps = Proc::ProcessTable->new->table;
    my $match = qr{$iTerm2 --server.* $ssh};
    foreach my $p ( @$ps ) {
        next unless $p->cmndline =~ /$match/;
        push @sessions, $p->cmndline;
        $sessions[-1] =~ s/$match\s+//;
    }
    return @sessions;
}

#
# for dealing with Cisco anyconnect, which I don't have to do anymore
#

sub add_search_domains {
    my $file = "/tmp/scutil.$$.txt";
    open my $fh, '>', $file;
    print {$fh} qq{open\nd.init\nget State:/Network/Service/com.cisco.anyconnect/DNS\n};
    foreach my $domain (@_) {
        print {$fh} "d.add DomainName $domain\n"
    }
    print {$fh} qq{set State:/Network/Service/com.cisco.anyconnect/DNS\nquit\n};
    close $fh;

    print "Adding search domains!\n";
    if ($verbose) {
        print "sudo scutil < -\n" . `cat $file`;
    }
    `sudo scutil <$file`;
    unlink $file;
}

sub get_search_domains {
    my $ps = `ps -ef`;
    my $service;
    if ($ps =~ /Cisco AnyConnect Secure Mobility Client/) {
    }
    my $file = "/tmp/scutil.$$.txt";
    my $cmds = qq{open\nget State:/Network/Service/com.cisco.anyconnect/DNS\nd.show\nquit\n};
    open my $fh, '>', $file;
    print {$fh} $cmds;
    close $fh;

    print "scutil < -\n$cmds\n" if ($verbose);
    open my $pipe, "scutil <$file |";
    my $mode;
    my @list;
    while (my $line = <$pipe>) {
        print $line if ($verbose);
        if ($line =~ /SearchDomains/) {
            $mode = 'domainlist';
            next;
        }
        next unless $mode;
        last if $line =~ /\}/;
        my($domain) = $line =~ /\d+\s+:\s+(\S+)\s*$/;
        push @list, $domain;
    }
    close $pipe;
    unlink $file;

    return @list;
}

sub get_os {
    my ($target) = @_;
    return q{} unless $push_cmds; # the OS is irrelevant if we're not pushing
                                  # any commands to the remote host

    $target = lc $target;

    return 'rhel'    if $target =~ /^rh\d+/;
    return 'solaris' if $target =~ /^sl\d+/;
    return 'aix'     if $target =~ /^ax\d+/;

    if (exists $hostmap{$target}) {
        if (exists $hostmap{$target}->{os}) {
            return $hostmap{$target}->{os};
        }
    }
    else {
        print "Running nmap -O $target to determine OS...\n";
        my $os   = 'unknown';
        my $data = `sudo nmap -O $target`;
        if ($data =~ /Running: Linux/) {
            $os = 'rhel';
        }
        $hostmap{$target} = { os => $os, nmap => $data };
        write_hostmap();
    }
}

sub os_commands {
    my ($os, $target) = @_;

    my $ssh  = ssh_command($target);
    my $dest = '/tmp/packybin';

    my @files  = grep { ! /~$/ } glob "$godir/common/*";
#    my $source = "source /tmp/packybin/bashrc; bash -l";
    my $source = "bash --rcfile /tmp/packybin/bashrc";

    if (! defined $os || $os eq 'none') {
        return make_temp_sh( $target, echo($ssh), $ssh );
    }
    elsif ($os eq 'rhel') {
        push @files, grep { ! /~$/ } glob "$godir/linux/*";
    }
    elsif ($os eq 'solaris') {
        push @files, grep { ! /~$/ } glob "$godir/solaris/*";
    }
    elsif ($os eq 'aix') {
        push @files, grep { ! /~$/ } glob "$godir/aix/*";
        # we have DASH on AIX
        $source = "dash --rcfile /tmp/packybin/dashrc -l";
    }

    my $mkdir  = qq{$ssh "mkdir -p $dest"};
    my $scp    = scp_command($target, $dest, @files);
    my $sshcmd = qq{$ssh -t "$source" || any};

    my @commands = (
        echo(qq{Making temporary directory on $target}),
        echo($mkdir),  $mkdir,
        echo(qq{Copying temporary scripts}),
        echo($scp),    $scp,
        echo(qq{Connecting to $target via SSH}),
        echo($sshcmd), $sshcmd,
    );

    return make_temp_sh( $target, @commands );
}

sub copy_files_to_node {
    my ($target, $os) = @_;
    my (@files, $dest);

    my @existing = existing_sessions();
    if ( any { $_ =~ /$target/ } @existing ) {
        print "Existing session on $target; skipping file copy.\n";
        return;
    }

    $dest = '/tmp/packybin';
    if ($os eq 'rhel') {
        @files = ( '~/Sites/bash/linux_bash.sh',
                   '~/Sites/bash/aix_less.bin' );
    }
    elsif ($os eq 'aix') {
        @files = ( '~/Sites/bash/aix_dash.sh',
                   '~/Sites/bash/aix_less.bin' );
    }

    if (@files) {
        print "Making temporary directory on $target ";
        my $cmd = ssh_command($target);
        if ($verbose) {
            my $files = join q{ }, @files;
            print qq{using $cmd "mkdir -p $dest"};
        }
        print "...\n";
        print `$cmd "mkdir -p $dest"`;

        my $cp = scp_command($target, $dest, @files);
        print "Copying files to $target ";
        if ($verbose) {
            my $files = join q{ }, @files;
            print qq{using $scp $files $def_user\@$target:$dest};
        }
        print "...\n";
        print `$cp`;
    }
}
